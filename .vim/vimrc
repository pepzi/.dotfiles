set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.fzf
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'SirVer/ultisnips'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'eagletmt/neco-ghc'
Plugin 'fidian/hexmode'
Plugin 'godlygeek/tabular'
Plugin 'honza/vim-snippets'
Plugin 'jamessan/vim-gnupg'
Plugin 'jiangmiao/auto-pairs'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'lukerandall/haskellmode-vim'
Plugin 'prettier/vim-prettier'
Plugin 'scrooloose/nerdtree'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-syntastic/syntastic'

call vundle#end()
syntax on
filetype plugin indent on

" set commands
set number
set tabstop=4
set shiftwidth=4
set expandtab
set shortmess=I
set relativenumber
set wildmenu
set cpo-=<
set wcm=<C-Z>

" leader mappings
let mapleader=","
map <F4> :emenu <C-Z>
map <Leader>f :FixWhitespace<CR>
map <Leader>g <C-]>,
map <Leader>i gg=G<CR>
map <Leader>m :emenu <C-Z>
map <Leader>n :NERDTreeToggle<CR>
map <Leader>pc :PluginClean<CR>
map <Leader>pi :PluginInstall<CR>
map <Leader>pl :PluginList<CR>
map <Leader>pu :PluginUpdate<CR>
map <Leader>r :source ~/.vim/vimrc<CR>
map <Leader>v :edit ~/.vim/vimrc<CR>
map <Leader>w :Window<CR>;
map <Leader><Leader> :ToggleBufExplorer<CR>
" nnoremap <silent> <Leader> :BufExplorer<CR>
" nnoremap <Leader><Leader> :ToggleBufExplorer<CR>
" nnoremap <silent> <m-F11> :BufExplorerHorizontalSplit<CR>
" nnoremap <silent> <c-F11> :BufExplorerVerticalSplit<CR>

nnoremap <Leader>b :Buffers<CR>
" " movement in insert mode
" inoremap <C-k>   <Up>
" inoremap <C-j>   <Down>
" inoremap <C-h>   <Left>
" inoremap <C-l>   <Right>

" if vim is started with a directory as argument, show NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<F9>"
let g:UltiSnipsListSnippets="<F10>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/UltiSnips'
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" Built in complete funcion messes with <c-k>, remap it like this
inoremap <c-x><c-k> <c-x><c-k>

" syntastic settings
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme="cobalt2"

" auto-pairs
let g:AutoPairsMapCh = 0
let g:AutoPairsShortcutToggle = '<F8>'
let g:AutoPairsShortcutFastWrap = ""
let g:AutoPairsShortcutJump = ""
let g:AutoPairsShortcutBackInsert = ""

" haskell stuff
let g:haddock_browser="lynx"
au BufEnter *.hs compiler ghc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=#necoghc#omnifunc

