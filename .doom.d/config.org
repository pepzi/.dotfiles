#+TITLE: System configuration managed by Doom Emacs
#+AUTHOR: Robert Sand
#+OPTIONS: :tangle yes toc:nil
#+STARTUP: content indent

* Emacs configuration
** Personal information

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp
(setq user-full-name "Robert Sand"
      user-mail-address "robert@pepzi.org")
#+end_src

** Look and feel

Setting theme, relative line numbers, remapping CapsLock to Ctrl
and making sure swea5 is loaded

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
(setq display-line-numbers-type 'relative)
(setq doom-font (font-spec :family "Fira Code" :size 18))

;; Remap CapsLock to Ctrl
;;(start-process-shell-command "xmodmap" nil "xmodmap ~/.Xmodmap")

(start-process-shell-command "setxkbmap" nil
                             "setxkbmap -model pc105 -layout se -variant swea5")
#+end_src

** IRC
#+begin_src emacs-lisp
(set-irc-server! "irc.libera.chat"
  `(:tls t
    :port 6697
    :nick "pepzi"
    :sasl-username ,(+pass-get-user "irc/libera.chat")
    :sasl-password (lambda (&rest _) (+pass-get-secret "irc/libera.chat"))
    :channels ("#emacs")))
#+end_src

** Org-mode
#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-roam-directory "~/org/roam")

(setq org-hide-emphasis-markers t)

(setq org-todo-keyword-faces
      '(("TODO"  . (:foreground "red" :weight bold))
        ("NEXT"  . (:foreground "red" :weight bold))
        ("DONE"  . (:foreground "forest green" :weight bold))
        ("WAITING"  . (:foreground "orange" :weight bold))
        ("CANCELLED"  . (:foreground "forest green" :weight bold))
        ("SOMEDAY"  . (:foreground "orange" :weight bold))
        ("OPEN"  . (:foreground "red" :weight bold))
        ("CLOSED"  . (:foreground "forest green" :weight bold))
        ("ONGOING"  . (:foreground "orange" :weight bold))))

(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
        (sequence "WAITING(w@/!)" "|" "CANCELLED(c!/!)")
        (sequence "SOMEDAY(s!/!)" "|")
        (sequence "OPEN(O!)" "|" "CLOSED(C!)")
        (sequence "ONGOING(o)" "|")))
#+end_src

** Elfeed
  #+begin_src elisp
(after! elfeed
  (setq elfeed-search-filter "@1-month-ago +unread"))
  #+end_src

** EXWM
*** Functions
**** Rename buffer to name of program running
#+begin_src emacs-lisp
(defun pepzi/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))
#+end_src

**** Run program in background
#+begin_src emacs-lisp
(defun pepzi/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process
           `(,(car command-parts) nil 0 nil
             ,@(cdr command-parts)))))
#+end_src

**** Run on init
#+begin_src emacs-lisp
(defun pepzi/exwm-init-hook ()
  ;; Make workspace 1 be the one where we land at startup
  (exwm-workspace-switch-create 1)

  ;; Launch apps that will run in the background
  (pepzi/run-in-background "nm-applet")
  (pepzi/run-in-background "pasystray")
  )
  #+end_src

*** Config
**** Initialize
#+begin_src emacs-lisp
(require 'exwm)
(require 'exwm-config)
#+end_src

**** Set up systray
#+begin_src emacs-lisp
(setq exwm-systemtray-height 16)

;; Load the system tray before exwm-init
(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+end_src
**** Various settings
#+begin_src emacs-lisp
(setq exwm-workspace-number 5)
#+end_src
**** Set up hooks
#+begin_src emacs-lisp

;; When EXWM finishes initialization, do some extra setup
(add-hook 'exwm-init-hook #'pepzi/exwm-init-hook)
(add-hook 'exwm-update-class-hook #'pepzi/exwm-update-class)
#+end_src

**** Display time in 24h and date in modeline
#+begin_src emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(display-time-mode 1)
#+end_src

**** Set default web browser to Qutebrowser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "qutebrowser")
#+end_src

*** Keybinds

These keys should always pass through to Emacs

#+begin_src emacs-lisp
(setq exwm-input-prefix-keys
  '(?\C-x
    ?\C-u
    ?\C-h
    ?\M-x
    ?\M-`
    ?\M-&
    ?\M-:
    ?\C-\M-j  ;; Buffer list
    ?\M-\ ))  ;; Ctrl+Space
#+end_src


Set up global key bindings.  These always work, no matter the input state!
Keep in mind that changing this list after EXWM initializes has no effect.

#+begin_src emacs-lisp
(define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
;;(exwm-input-set-key (kbd "s-k") #'exwm-workspace-delete)
;;(exwm-input-set-key (kbd "s-w") #'exwm-workspace-swap)

(defun my-new-exwm-launch (command)
"Doc-string."
  (async-start-process command command nil))

(exwm-input-set-key (kbd "s-d")
                    (lambda ()
                      (interactive)
                      (my-new-exwm-launch "dmenu_run")))

(setq exwm-input-global-keys
      `(
        ;; Reset to line-mode
        ;; (C-c C-k switches to char-mode
        ;;          via exwm-input-release-keyboard)
        ([?\s-r] . exwm-reset)
        ([?\s-f] . exwm-layout-toggle-fullscreen)

        ;; Move between windows
        ([s-left] . windmove-left)
        ([s-right] . windmove-right)
        ([s-up] . windmove-up)
        ([s-down] . windmove-down)

        ([?\s-h] . windmove-left)
        ([?\s-l] . windmove-right)
        ([?\s-k] . windmove-up)
        ([?\s-j] . windmove-down)

        ;; Launch applications via shell command
        ([?\s-&] . (lambda (command)
                     (interactive (list (read-shell-command "$ ")))
                     (start-process-shell-command command nil command)))

        ;; Switch workspace
        ([?\s-w] . exwm-workspace-switch)

        ;; 's-N': Switch to certain workspace
        ;;        with Super (Win) plus a number key (0 - 9)
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))))
#+end_src

*** Enable EXWM
#+begin_src emacs-lisp
(exwm-enable)
#+end_src

* System configuration
** qutebrowser
#+begin_src python :tangle "~/.config/qutebrowser/config.py"
import subprocess
import os
from qutebrowser.api import interceptor

config.load_autoconfig();

def filter_yt(info: interceptor.Request):
    url = info.request_url
    if (
            url.host() == "www.youtube.com"
            and url.path() == "/get_video_info"
            and "&adformat=" in url.query()
    ):
        info.block()

interceptor.register(filter_yt)

config.bind(",M", "hint links spawn mpv {hint-url}")
config.bind("yo", "yank inline [[{url}][{title}]]")

config.bind("xb", "config-cycle statusbar.hide")
config.bind("xt", "config-cycle tabs.show always switching")
config.bind("xx", "config-cycle statusbar.hide ;; config-cycle tabs.show always switching")

c.url.searchengines = {
    "DEFAULT": "https://duckduckgo.com/?q={}",
    "yt":      "https://www.youtube.com/results?search_query={}",
    "g":       "https://www.google.se/search?q={}"
}

c.editor.command = [
    "gvim", "-f", "{file}", "-c", "normal {line}G{column0}l"
]

#+end_src
** mpv
Current settings managed here:
- default folder for screenshots to ~/Pictures/mpv
- disabling cursor keys because they were interfering with Super-<arrow>
*** mpv.conf
#+begin_src conf :tangle "~/.config/mpv/mpv.conf"
# mpv config tangled from config.org
screenshot-directory="~/Pictures/mpv"
#+end_src
*** input.conf
#+begin_src conf :tangle "~/.config/mpv/input.conf"
# mpv keybindings tangled from config.org
#
# Location of user-defined bindings: ~/.config/mpv/input.conf
#
# Lines starting with # are comments. Use SHARP to assign the # key.
# Copy this file and uncomment and edit the bindings you want to change.
#
# List of commands and further details: DOCS/man/input.rst
# List of special keys: --input-keylist
# Keybindings testing mode: mpv --input-test --force-window --idle
#
# Use 'ignore' to unbind a key fully (e.g. 'ctrl+a ignore').
#
# Strings need to be quoted and escaped:
#   KEY show-text "This is a single backslash: \\ and a quote: \" !"
#
# You can use modifier-key combinations like Shift+Left or Ctrl+Alt+x with
# the modifiers Shift, Ctrl, Alt and Meta (may not work on the terminal).
#
# The default keybindings are hardcoded into the mpv binary.
# You can disable them completely with: --no-input-default-bindings

# Developer note:
# On compilation, this file is baked into the mpv binary, and all lines are
# uncommented (unless '#' is followed by a space) - thus this file defines the
# default key bindings.

# If this is enabled, treat all the following bindings as default.
#default-bindings start

#MBTN_LEFT     ignore              # don't do anything
#MBTN_LEFT_DBL cycle fullscreen    # toggle fullscreen
#MBTN_RIGHT    cycle pause         # toggle pause/playback mode
#MBTN_BACK     playlist-prev       # skip to the previous file
#MBTN_FORWARD  playlist-next       # skip to the next file

# Mouse wheels, touchpad or other input devices that have axes
# if the input devices supports precise scrolling it will also scale the
# numeric value accordingly
#WHEEL_UP      seek 10          # seek 10 seconds forward
#WHEEL_DOWN    seek -10         # seek 10 seconds backward
#WHEEL_LEFT    add volume -2
#WHEEL_RIGHT   add volume 2

## Seek units are in seconds, but note that these are limited by keyframes
RIGHT  ignore
LEFT   ignore
UP     ignore
DOWN   ignore
#RIGHT seek  5                          # seek 5 seconds forward
#LEFT  seek -5                          # seek 5 seconds backward
#UP    seek  60                         # seek 1 minute forward
#DOWN  seek -60                         # seek 1 minute backward
# Do smaller, always exact (non-keyframe-limited), seeks with shift.
# Don't show them on the OSD (no-osd).
#Shift+RIGHT no-osd seek  1 exact       # seek exactly 1 second forward
#Shift+LEFT  no-osd seek -1 exact       # seek exactly 1 second backward
#Shift+UP    no-osd seek  5 exact       # seek exactly 5 seconds forward
#Shift+DOWN  no-osd seek -5 exact       # seek exactly 5 seconds backward
#Ctrl+LEFT   no-osd sub-seek -1         # seek to the previous subtitle
#Ctrl+RIGHT  no-osd sub-seek  1         # seek to the next subtitle
#Ctrl+Shift+LEFT sub-step -1            # change subtitle timing such that the previous subtitle is displayed
#Ctrl+Shift+RIGHT sub-step 1            # change subtitle timing such that the next subtitle is displayed
#Alt+left  add video-pan-x  0.1         # move the video right
#Alt+right add video-pan-x -0.1         # move the video left
#Alt+up    add video-pan-y  0.1         # move the video down
#Alt+down  add video-pan-y -0.1         # move the video up
#Alt++     add video-zoom   0.1         # zoom in
#Alt+-     add video-zoom  -0.1         # zoom out
#Alt+BS set video-zoom 0 ; set video-pan-x 0 ; set video-pan-y 0 # reset zoom and pan settings
#PGUP add chapter 1                     # seek to the next chapter
#PGDWN add chapter -1                   # seek to the previous chapter
#Shift+PGUP seek 600                    # seek 10 minutes forward
#Shift+PGDWN seek -600                  # seek 10 minutes backward
#[ multiply speed 1/1.1                 # decrease the playback speed
#] multiply speed 1.1                   # increase the playback speed
#{ multiply speed 0.5                   # halve the playback speed
#} multiply speed 2.0                   # double the playback speed
#BS set speed 1.0                       # reset the speed to normal
#Shift+BS revert-seek                   # undo the previous (or marked) seek
#Shift+Ctrl+BS revert-seek mark         # mark the position for revert-seek
#q quit
#Q quit-watch-later                     # exit and remember the playback position
#q {encode} quit 4
#ESC set fullscreen no                  # leave fullscreen
#ESC {encode} quit 4
#p cycle pause                          # toggle pause/playback mode
#. frame-step                           # advance one frame and pause
#, frame-back-step                      # go back by one frame and pause
#SPACE cycle pause                      # toggle pause/playback mode
#> playlist-next                        # skip to the next file
#ENTER playlist-next                    # skip to the next file
#< playlist-prev                        # skip to the previous file
#O no-osd cycle-values osd-level 3 1    # toggle displaying the OSD on user interaction or always
#o show-progress                        # show playback progress
#P show-progress                        # show playback progress
#i script-binding stats/display-stats   # display information and statistics
#I script-binding stats/display-stats-toggle # toggle displaying information and statistics
#` script-binding console/enable        # open the console
#z add sub-delay -0.1                   # shift subtitles 100 ms earlier
#Z add sub-delay +0.1                   # delay subtitles by 100 ms
#x add sub-delay +0.1                   # delay subtitles by 100 ms
#ctrl++ add audio-delay 0.100           # change audio/video sync by delaying the audio
#ctrl+- add audio-delay -0.100          # change audio/video sync by shifting the audio earlier
#Shift+g add sub-scale +0.1             # increase the subtitle font size
#Shift+f add sub-scale -0.1             # decrease the subtitle font size
#9 add volume -2
#/ add volume -2
#0 add volume 2
#* add volume 2
#m cycle mute                           # toggle mute
#1 add contrast -1
#2 add contrast 1
#3 add brightness -1
#4 add brightness 1
#5 add gamma -1
#6 add gamma 1
#7 add saturation -1
#8 add saturation 1
#Alt+0 set current-window-scale 0.5     # halve the window size
#Alt+1 set current-window-scale 1.0     # reset the window size
#Alt+2 set current-window-scale 2.0     # double the window size
#d cycle deinterlace                    # toggle the deinterlacing filter
#r add sub-pos -1                       # move subtitles up
#R add sub-pos +1                       # move subtitles down
#t add sub-pos +1                       # move subtitles down
#v cycle sub-visibility                 # hide or show the subtitles
#Alt+v cycle secondary-sub-visibility   # hide or show the secondary subtitles
#V cycle sub-ass-vsfilter-aspect-compat # toggle stretching SSA/ASS subtitles with anamorphic videos to match the historical renderer
#u cycle-values sub-ass-override "force" "no" # toggle overriding SSA/ASS subtitle styles with the normal styles
#j cycle sub                            # switch subtitle track
#J cycle sub down                       # switch subtitle track backwards
#SHARP cycle audio                      # switch audio track
#_ cycle video                          # switch video track
#T cycle ontop                          # toggle placing the video on top of other windows
#f cycle fullscreen                     # toggle fullscreen
#s screenshot                           # take a screenshot of the video in its original resolution with subtitles
#S screenshot video                     # take a screenshot of the video in its original resolution without subtitles
#Ctrl+s screenshot window               # take a screenshot of the window with OSD and subtitles
#Alt+s screenshot each-frame            # automatically screenshot every frame; issue this command again to stop taking screenshots
#w add panscan -0.1                     # decrease panscan
#W add panscan +0.1                     # shrink black bars by cropping the video
#e add panscan +0.1                     # shrink black bars by cropping the video
#A cycle-values video-aspect-override "16:9" "4:3" "2.35:1" "-1" # cycle the video aspect ratio ("-1" is the container aspect)
#POWER quit
#PLAY cycle pause                       # toggle pause/playback mode
#PAUSE cycle pause                      # toggle pause/playback mode
#PLAYPAUSE cycle pause                  # toggle pause/playback mode
#PLAYONLY set pause no                  # unpause
#PAUSEONLY set pause yes                # pause
#STOP quit
#FORWARD seek 60                        # seek 1 minute forward
#REWIND seek -60                        # seek 1 minute backward
#NEXT playlist-next                     # skip to the next file
#PREV playlist-prev                     # skip to the previous file
#VOLUME_UP add volume 2
#VOLUME_DOWN add volume -2
#MUTE cycle mute                        # toggle mute
#CLOSE_WIN quit
#CLOSE_WIN {encode} quit 4
#ctrl+w quit
#E cycle edition                        # switch edition
#l ab-loop                              # set/clear A-B loop points
#L cycle-values loop-file "inf" "no"    # toggle infinite looping
#ctrl+c quit 4
#DEL script-binding osc/visibility      # cycle OSC visibility between never, auto (mouse-move) and always
#ctrl+h cycle-values hwdec "auto" "no"  # toggle hardware decoding
#F8 show-text ${playlist}               # show the playlist
#F9 show-text ${track-list}             # show the list of video, audio and sub tracks

#
# Legacy bindings (may or may not be removed in the future)
#
#! add chapter -1                       # seek to the previous chapter
#@ add chapter 1                        # seek to the next chapter

#
# Not assigned by default
# (not an exhaustive list of unbound commands)
#

# ? cycle sub-forced-only               # toggle DVD forced subs
# ? stop                                # stop playback (quit or enter idle mode)

#+end_src
* Documentation
** Info from original config.el

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
